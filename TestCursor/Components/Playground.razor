@page "/"
@page "/scrollabletextbox"
@using System.Text.Json
@using AiAgent
@using Products
@rendermode InteractiveServer
@using Markdig
@using Pages = Entities.Pages.Playground;

<h3>Playground</h3>

<PageTitle>Scrollable TextBox</PageTitle>

<!-- Products TextBox Section -->
<h3>Products</h3>

<table class="table">
    <thead>
        <tr>
            <th>Image</th>
            <th>Title</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in textBoxContent.Select((product, index) => new { product, index }))
        {
            <tr @onclick="() => OnRowClick(product.index)">
                <td><img src="@product.product.Image" alt="@product.product.Title" style="max-width: 100px; max-height: 100px;" /></td>
                <td>@product.product.Title</td>
                <td>@(new MarkupString(Markdown.ToPlainText(product.product.BodyHtml)))</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private void OnRowClick(int rowIndex)
    {
        selectedRowIndex = rowIndex;
        selectedProductId = textBoxContent[rowIndex].Id;
        Console.WriteLine($"Row with Product ID {selectedProductId} clicked");
    }
}

<!-- GetAllProducts Button Section -->
<button class="btn btn-primary" @onclick="GetAllProducts">Get All Products</button>

<!-- Recommendations TextBox Section -->
<h3>Recommendations</h3>
<div class="row">
    <div class="col-md-8">
        <div class="form-control" style="height: 600px; overflow-y: auto;">
            @if (isLoading)
            {
                <LoadingState Message="Analyzing..." />
            }
            else
            {
                @aiResponseHtml
            }
        </div>
    </div>
    <!-- Another control to the right -->
    <div class="col-md-4">
        <div class="form-control" style="height: 600px; overflow-y: auto;">
            <input type="text" class="form-control" value="Row @selectedRowIndex - Id @selectedProductId selected" readonly />
            @if (selectedRowIndex >= 0 && selectedRowIndex < textBoxContent.Count)
            {
                <img src="@textBoxContent[selectedRowIndex].Image" alt="@textBoxContent[selectedRowIndex].Title" style="max-width: 100%; max-height: 100%;" />
            }
        </div>
        <button class="btn btn-info mt-2" @onclick="() => GetDetailedSuggestions(selectedProductId)">Details</button>

        @code {
            private async Task GetDetailedSuggestions(long productId)
            {
                if (selectedRowIndex >= 0 && selectedRowIndex <= textBoxContent.Count)
                {
                    var selectedProduct = textBoxContent[selectedRowIndex];
                    var detailedSuggestions = await Task.Run(() => AiAgent.GetDetailedRecommendation(productId, shopifyAllProductsResult));
                    string detailedSuggestrionsPart1 = string.Empty;
                    string detailedSuggestrionsPart2 = string.Empty;
                    using (JsonDocument doc = JsonDocument.Parse(detailedSuggestions))
                    {
                        JsonElement root = doc.RootElement;
                        detailedSuggestrionsPart1 = root.GetProperty("Part1").GetString();
                        detailedSuggestrionsPart2 = root.GetProperty("Part2").GetString();
                    }

                    aiResponseContent2 = detailedSuggestrionsPart1;
                    aiResponseHtml2 = new MarkupString(Markdown.ToHtml(aiResponseContent2));
                }
            }
        }
        <div class="form-control mt-2" style="height: 600px; overflow-y: auto;">
            @aiResponseHtml2
        </div>
    </div>
</div>
<!-- Analyze Button Section -->
<button class="btn btn-secondary" @onclick="SendToAI">Analyze</button>

@code {
    private async Task SendToAI()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await Task.Delay(1); // Ensure UI updates
            var response = await Task.Run(() => AiAgent.QueryAgent(string.Join("\n", shopifyAllProductsResult)));
            aiResponseContent = response;
            aiResponseHtml = new MarkupString(Markdown.ToHtml(aiResponseContent));
        }
        finally
        {
            isLoading = false;
        }
    }
}

@code {
    private bool isLoading = false;

    // Textbox1 variables
    private List<Pages.Product> textBoxContent = new List<Pages.Product>();
    private string shopifyAllProductsResult;

    // Textbox2 variables
    private string aiResponseContent = string.Empty;
    private MarkupString aiResponseHtml = new MarkupString("No AI Response Yet");
    private int selectedRowIndex;
    private long selectedProductId;


    private string aiResponseContent2 = string.Empty;
    private MarkupString aiResponseHtml2 = new MarkupString();


    [Inject]
    private IProcessProducts ProcessProducts { get; set; }

    [Inject]
    private IAiAgent AiAgent { get; set; }

    private async Task GetAllProducts()
    {
        textBoxContent = new List<Pages.Product> { new Pages.Product { Title = "Fetching all products...", BodyHtml = "" } };
        shopifyAllProductsResult = ProcessProducts.GetAllProducts();
        foreach (var p in ProcessProducts.ProductList.Products)
        {
            var contentLine = new Pages.Product { Id = p.Id, Image = p.Image?.Src, Title = p.Title, BodyHtml = p.BodyHtml };
            textBoxContent.Add(contentLine);
        }
    }
}