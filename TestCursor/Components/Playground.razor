@page "/"
@page "/scrollabletextbox"
@using AiAgent
@using Products
@rendermode InteractiveServer
@using Markdig
@using ProductsAgent.Models
@using Pages = Entities.Pages.Playground;


<h3>Playground</h3>

<PageTitle>Scrollable TextBox</PageTitle>

<h3>Products</h3>

<table class="table">
    <thead>
        <tr>
            <th>Image</th>
            <th>Title</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in textBoxContent)
        {
            <tr>
                <td><img src="@product.Image" alt="@product.Title" style="max-width: 100px; max-height: 100px;" /></td>
                <td>@product.Title</td>
                <td>@(new MarkupString(Markdown.ToPlainText(product.HtmlBody)))</td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="GetAllProducts">Get All Products</button>

<h3>Recommendations</h3>
<div class="form-control" style="height: 600px; overflow-y: auto;">
    @if (isLoading)
    {
        <LoadingState Message="Sending data to AI..." />
    }
    else
    {
        @aiResponseHtml
    }
</div>

<button class="btn btn-secondary" @onclick="SendToAI">Send to AI</button>

@code {
    private bool isLoading = false;

    // Textbox1 variables
    private List<Pages.Product> textBoxContent = new List<Pages.Product>();
    private string shopifyAllProductsResult;

    //Textbox2 variables
    private string aiResponseContent = string.Empty;
    private MarkupString aiResponseHtml = new MarkupString("No AI Response Yet");


    [Inject]
    private IProcessProducts ProcessProducts { get; set; }

    [Inject]
    private IAiAgent AiAgent { get; set; }

    private async Task GetAllProducts()
    {
        textBoxContent = new List<Pages.Product> { new Pages.Product { Title = "Fetching all products...", HtmlBody = "" } };
        shopifyAllProductsResult = ProcessProducts.GetAllProducts();
        foreach (var p in ProcessProducts.ProductList.Products)
        {
            var contentLine = new Pages.Product{Image = p.Image.Src,Title = p.Title, HtmlBody = p.HtmlBody};
            textBoxContent.Add(contentLine);
        }
    }

    private async Task SendToAI()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await Task.Delay(1); // Ensure UI updates
            var response = await Task.Run(() => AiAgent.QueryAgent(string.Join("\n", shopifyAllProductsResult)));
            aiResponseContent = response;
            aiResponseHtml = new MarkupString(Markdown.ToHtml(aiResponseContent));
        }
        finally
        {
            isLoading = false;
        }
    }
}